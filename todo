- clean up b tree and loader
- add internal and leaf node
- change pointers to allow for multiple tree references
- add tree-ptr table
- integrate merging on trees
- separate root node and internal, leaf nodes

- fully integrate loader into block_cache

- add caching to loader
indexing thru the file system is slow (using glob) when theres a large number of files

- create a data structure which can be serialized as bytes to a file, using mmap

example finding a file:
/foo/meme --> hash --> abc

binary tree of hash -> meta_data

tree structure:
struct header {
    int tree_offset;
    // other offset
};
struct ent {
    char hash[4096];
    // offsets into memory, based on how deep its in the tree
    uint32_t ent_left;
    uint32_t ent_right;
    struct inode;
};

struct inode {
    uint32_t mode;
    uint32_t nlink;
    uint64_t mtime;
    uint64_t ctime;
    uint64_t size;
    int deleted;
    int block_data;
};

struct block_data {
    int next;
    int size;
    int offset;
    char data_file[4096];
};

this requires a memory allocator which only operates within a file
the end result will be a file containing the entire data structure,
which we can then mmap back and act on as if it was always in memory.




======
- unlinking, removals
- access / chmod stuff
- group / user permissions
- test over network
-
- general testing
===
TODO:
 - make looking for a particular inode id / path faster than linear time, using a tree like structure
===
Snapshots

TODO!!
