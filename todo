- step thru tree in log file
    - make change to get med post insert
- fix finding on deep trees
- refactor finding in the loader, remove all those goto's
- finish b+tree implementation in file system, get loads and flush to work
- finish loader
- separate root node and internal, leaf nodes

- fully integrate loader into block_cache

- add caching to loader
indexing thru the file system is slow (using glob) when theres a large number of files

- create a data structure which can be serialized as bytes to a file, using mmap

example finding a file:
/foo/meme --> hash --> abc

binary tree of hash -> meta_data

tree structure:
struct header {
    int tree_offset;
    // other offset
};
struct ent {
    char hash[4096];
    // offsets into memory, based on how deep its in the tree
    uint32_t ent_left;
    uint32_t ent_right;
    struct inode;
};

struct inode {
    uint32_t mode;
    uint32_t nlink;
    uint64_t mtime;
    uint64_t ctime;
    uint64_t size;
    int deleted;
    int block_data;
};

struct block_data {
    int next;
    int size;
    int offset;
    char data_file[4096];
};

this requires a memory allocator which only operates within a file
the end result will be a file containing the entire data structure,
which we can then mmap back and act on as if it was always in memory.




======


- load from disk is the biggest bottleneck, make it faster some how

- add mtime to each block. Currently we overwrite blocks only if
the inode's overall mtime is higher. It can be the case though
if two people work on the same file, on separate blocks, that sections
    are updated across .node / .data files. 
adding mtime to each block will fix this, but will require keeping
track of the time for each block, and changing how stuff is read/written to .node files.


- unlinking, removals
- access / chmod stuff
- group / user permissions
- test over network
-
- general testing


=== To think about later ====
Issue:
- cache consistency when garbage collection occurs
solution: implement function in block_cache to "update" its file cache
when gc occurs, if gc is implemented in fuse_ops. Alternatively,
gc should be implemented in the block_cache

===
TODO:
 - make looking for a particular inode id / path faster than linear time, using a tree like structure
===
Snapshots

TODO!!
